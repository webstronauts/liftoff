#!/usr/bin/env bash

###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################

trap 'ret=$?; test $ret -ne 0 && printf "\n   \e[31m✖\033[0m  Formation failed  \e[31m✖\033[0m\n" >&2; exit $ret' EXIT

set -e

###############################################################################
# ENGINE: Check for required functions file
###############################################################################

if [ -e engine ]; then
	cd "$(dirname "${BASH_SOURCE[0]}")" \
		&& . "engine"
else
	printf "\n ⚠️  ./engine not found  🚀 First, you need an engine to liftoff\n"
	exit 1
fi

###############################################################################
# CHECK: Bash version
###############################################################################

check_bash_version

###############################################################################
# Ready for liftoff!          http://patorjk.com/software/taag/ ( font: Sub-Zero )
###############################################################################

printf "

   __         __     ______   ______   ______     ______   ______  
  /\ \       /\ \   /\  ___\ /\__  _\ /\  __ \   /\  ___\ /\  ___\ 
  \ \ \____  \ \ \  \ \  __\ \/_/\ \/ \ \ \/\ \  \ \  __\ \ \  __\ 
   \ \_____\  \ \_\  \ \_\      \ \_\  \ \_____\  \ \_\    \ \_\   
    \/_____/   \/_/   \/_/       \/_/   \/_____/   \/_/     \/_/   
  ----------------------------------------------------------------
                                              [for Bash 3.2 - 3.9]
╭──────────────────────────────────────────────────────────────────╮
│  Okay developers now let's get ready to ${bold}liftoff${normal}.                 │
│──────────────────────────────────────────────────────────────────│
│  Safe to run multiple times on the same machine.                 │
│  It ${green}installs${reset}, ${blue}upgrades${reset}, or ${yellow}skips${reset} packages based on what is       │
│  already installed on the machine.                               │
╰──────────────────────────────────────────────────────────────────╯
   ${dim}$(get_os) $(get_os_version) ${normal} // ${dim}$BASH ${normal} // ${dim}$BASH_VERSION${reset}
"

###############################################################################
# CHECK: Internet
###############################################################################

chapter "Checking internet connection…"
check_internet_connection

###############################################################################
# PROMPT: Password
###############################################################################

chapter "Caching password…"
ask_for_sudo

###############################################################################
# PROMPT: SSH Key
###############################################################################

chapter 'Checking for SSH key…'
ssh_key_setup

###############################################################################
# INSTALL: Dependencies
###############################################################################

chapter "Installing Dependencies…"

# -----------------------------------------------------------------------------
# XCode
# -----------------------------------------------------------------------------

if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
	test -d "${xpath}" && test -x "${xpath}" ; then
	print_success_muted "Xcode already installed. Skipping."
else
	step "Installing Xcode…"
	xcode-select --install
	print_success "Xcode installed!"
fi

if [ ! -d "$HOME/.bin/" ]; then
	mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# -----------------------------------------------------------------------------
# Oh My Zsh
# -----------------------------------------------------------------------------

if [ -d "$HOME/.oh-my-zsh" ]; then
	print_success_muted "Oh My Zsh already installed. Skipping."
else
	step "Installing Oh My Zsh…"
	sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" "" --unattended > /dev/null
	print_success "Oh My Zsh installed!"
fi

# -----------------------------------------------------------------------------
# Homebrew
# -----------------------------------------------------------------------------

if ! [ -x "$(command -v brew)" ]; then
	step "Installing Homebrew…"
	curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
	export PATH="/usr/local/bin:$PATH"
	print_success "Homebrew installed!"
else
	print_success_muted "Homebrew already installed. Skipping."
fi

if brew list | grep -Fq brew-cask; then
	step "Uninstalling old Homebrew-Cask…"
	brew uninstall --force brew-cask
	print_success "Homebrew-Cask uninstalled!"
fi

###############################################################################
# INSTALL: brews
###############################################################################

if [ -e $cwd/stages/brews ] && [ -s $cwd/stages/brews ]; then
	chapter "Installing Homebrew formulae…"

	for brew in $(<$cwd/stages/brews); do
		install_brews $brew
	done
fi

###############################################################################
# UPDATE: Homebrew
###############################################################################

chapter "Updating Homebrew formulae…"
brew update

###############################################################################
# INSTALL: casks
###############################################################################

if [ -e $cwd/stages/casks ] && [ -s $cwd/stages/casks ]; then
	chapter "Installing apps via Homebrew…"

	for cask in $(<$cwd/stages/casks); do
	    install_application_via_brew $cask
	done
fi

###############################################################################
# INSTALL: Mac App Store Apps
###############################################################################

if [ -e $cwd/stages/apps ] && [ -s $cwd/stages/apps ]; then
	chapter "Installing apps from App Store…"

	if [ -x mas ]; then
		print_warning "Please install mas-cli first: brew mas. Skipping."
	else
		if mas_setup; then
			# Workaround for associative array in Bash 3
			# https://stackoverflow.com/questions/6047648/bash-4-associative-arrays-error-declare-a-invalid-option
			for app in $(<$cwd/stages/apps); do
				KEY="${app%%::*}"
				VALUE="${app##*::}"
				install_application_via_app_store $KEY $VALUE
			done
		else
			print_warning "Please signin to App Store first. Skipping."
		fi
	fi
fi

###############################################################################
# CLEAN: Homebrew files
###############################################################################

chapter "Cleaning up Homebrew files…"
brew cleanup 2> /dev/null

###############################################################################
# OPTIONAL: Customizations
###############################################################################

chapter "Releasing satellite…"

if [ -f "$HOME/.satellite" ]; then
	if ask "Do you want to release satellite into orbit?" Y; then
		. "$HOME/.satellite"; printf "\n 🛰 ${bold}Satellite entered orbit.${normal}\n";
	else
		print_success_muted "Releasing satellite declined. Skipped.";
	fi
else
	print_warning "No ~/.satellite found. Skipping."
fi

###############################################################################
# 🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀
###############################################################################

e_liftoff
